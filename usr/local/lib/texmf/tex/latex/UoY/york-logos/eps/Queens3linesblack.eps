%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.0
%%For: (Print Unit) (University of York)
%%Title: (Queens 3 lines black)
%%CreationDate: (17/2/97) (3:45 pm)
%%BoundingBox: -92 3 354 630
%%HiResBoundingBox: -91.1696 3.4035 353.1118 630.1323
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_IllustratorA_AI5 1.0 0
%AI5_FileFormat 1.1
%AI3_ColorUsage: Black&White
%%CMYKCustomColor: 1 0.51 0 0.305 (PANTONE 541 CV)
%%+ 0 0 0 0.38 (PANTONE 877)
%%+ 0 0 0 0.34 (PANTONE Cl Gy 5 CV)
%%+ 0 0.45 0.6 0 (Peach)
%%+ 0 0.5 0.05 0 (Pink)
%%+ 0.85 1 0 0 (Purple)
%AI3_TemplateBox: 144 260.5 144 260.5
%AI3_TileBox: -127.5 -132 410.5 649
%AI3_DocumentPreview: Macintosh_Pic
%AI5_ArtSize: 595.2756 841.8898
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: 72 48.5 6 817 527 58 1 1 3 40
%AI5_OpenViewLayers: 7
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.0 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.0 
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 21 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch aload pop pop
			4
			{
				4 index mul 4 1 roll
			} repeat
			5 -1 roll pop
			setcmykcolor
		}
		def
	} if
	/gt38? version cvx exec 38 gt def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
	level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.0 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.0 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 10 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/screenid
	deviceDPI
	currentscreen pop pop
	dup dup 60 ge exch 150 le and deviceDPI 300 le and
	{
		pop 60
	} if
	div 1.41421 div 0.5 add cvi
def
/setcustomscreen {deviceDPI customsize div 0 {
1 add 2 div customsize mul cvi exch
1 add 2 div customsize mul cvi exch
customsize mul add
customdata exch get 256 div
} setscreen} def
/screenid deviceDPI currentscreen pop pop div
2 sqrt div
0.5 add cvi def
/customdata 28 28 mul string def
/customsize 16 def
currentfile customdata readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
2 screenid eq {setcustomscreen} if
/customsize 24 def
currentfile customdata readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
3 screenid eq {setcustomscreen} if
/customsize 16 def
currentfile customdata readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
4 screenid eq {setcustomscreen} if
/customsize 20 def
currentfile customdata readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
5 screenid eq {setcustomscreen} if
/customsize 24 def
currentfile customdata readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
6 screenid eq {setcustomscreen} if
/customsize 28 def
currentfile customdata readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
7 screenid eq {setcustomscreen} if
/customsize 16 def
currentfile customdata readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
8 screenid eq {setcustomscreen} if
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.0 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.1 0
%%CreationDate: (08/20/92) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 68 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
	Adobe_blend_AI5_vars begin
} bd
/terminate
{
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
		currentdict Adobe_blend_AI5 eq
		{
		 end
		} if
	} if
} bd
/nullString () def
/zeroStringAry 256 string def
/dpiThreshold 600 def
/tRectOK? deviceDPI dpiThreshold le currentscreen pop pop 150 le and def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 74 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/white? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
[
/tint1Data
/tint2Data
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/rampType
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/ccAry1 5 array def
/setCustomColor
{
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	byte dup 0 4 -1 roll 255 mul cvi put
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/blendImg
{
	setImgSpace cData systemdict /image get exec
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		cyData mgData yeData cData
		mCMYKData
		true 4
		doCImg
	} bd
} if
/colorimage where dup
{
	exch pop
	/doCImg /colorimage load def
	/mCMYKData
	{
		4
		{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
			4 1 roll
		} repeat
	} bd
} if
not
{
	/mCMYKData nullProc def
	/doCImg
	{
		pop pop
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
		systemdict /image get exec
		sSave restore
	} bd
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		cyData mgData yeData cData
		setSSave
		mCMYKData
		true 4 doCImg
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 1 store
		/cData currentgray makeByte store
		blendImg
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 1 store
		setImgSpace
		currentcmykcolor
		4
		{
			makeByte 1 string copy 4 1 roll
		} repeat
		true 4
		doCImg
		sSave restore
	} bd
	/bFill
	{
		color?
		{
			c1ImgFill
		}
		{
			bwFill
		} ifelse
	} bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			/setcmykcolor cvx
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill /bwFill load def
		/whiteByte 1 string dup 0 255 put def
		{
			cBType 0 eq
			{
				setSSave
				/cData whiteByte store
				/cDataLen 1 store
				blendImg
				sSave restore
			}
			{
				_fill
			} ifelse
		}
	} ifelse
	bd
	/d255- 256 array def
	0 1 255
	{
		d255- exch 1 d255 2 index get sub put
	} bind for
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		systemdict /setgray get
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				%white?
				%{
				%}
				%{
				setCustomColor
				%}
				%ifelse
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/white? 4 index 1 eq store
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		composite? blend? or _of not or
		{
			_fill
		}
		{
			newpath
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					systemdict /setgray get exec
					systemdict /fill get exec
				}
				{
					_fill
					cData type /stringtype ne
					{
						/cDataLen 1 store
						isCMYKSep?
						{
							/cData dup load 1 exch sub store
						} if
					} if
					rdBlend
				} ifelse
			}
			{
				_of not
				{
					_fill
				}
				{
					newpath
				} ifelse
				bHi?
				{
					/cDataLen 1 store
					/bDataLen 1 store
					/cData 1 customColor?
					{
						pop 0
					} if
					store
					_of not
					{
						rdBlend
					}
					{
						pTState?
						{
							/bAxis rampPoint endPoint sub st
							xHi bAxis mul yHi bAxis mul translate
						} if
					} ifelse
				} if
			} ifelse
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/testCC
	{
		gsave
		pop 5 1 roll pop pop pop pop 1 1 1 1 5 -1 roll 0
		setCustomColor
		currentcmykcolor
		grestore
	} bd
	/ccThrough?
	{
		testCC anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		%***	fake Separator out to believe its white
		%***	if there's no color on the current channel
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		/white? 5 copy pop add add add 0 eq store
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				/white? 5 copy pop add add add 0 eq store
				setcmykcolor
			}
			{
				/white? 1 index 1 eq store
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? white? or blend? or
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
} if
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/invertXfer
	[
	[
	1 /exch cvx /sub cvx
	currenttransfer aload pop
	] cvx
	/settransfer cvx
	] cvx
	bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? currentcmykcolor anyColor? and
			white? or
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
		/white? false store
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne
				{
					invertXfer
				} if
				blendImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/doCSepImg
	{
		cDataLen 1 8 2 index 0 0 1 0 0 dMatrix astore
		0 0 0 cData
		doCImg
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		colorType 0 gt
		{
			cCMYKData load 0 eq
			{
				setCStop
				/blend? false store
			} if
		} if
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		pop
		mark 7 1 roll
		6 copy ccThrough?
		{
			forceCMYK
			pop
			stop
		} if
		/blend?
		6
		{
			16 index
		} repeat
		ccThrough?
		store
		blend?
		{
			forceCMYK
		} if
		cleartomark
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray		
		}
		{
			1 eq
			{
				/white? 5 copy pop add add add 0 eq store
				setcmykcolor				
			}
			{	
				/white? 1 index 1 eq store
				setCustomColor					
			}
			ifelse		
		}
		ifelse
		currentcmykcolor anyColor? blend? or
		 white? or
		 endC?
		 or
		{
			bFill
		}
		{
			handleOP
		} ifelse
	}
	bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			white? or
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				blendImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 eq tint1Data 0 ne and
		colorType 3 eq tint1Data 0 ne tint2Data 0 ne or and
		or
		dup /blend? xs
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		pop
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		mark 7 1 roll
		testTopCC
		{
			/blend? 1 index 1 ne store
			/startC? blend? store
			/endC? false store
			blend? not
			{
				cleartomark stop
			} if
			/cData tint1Data store
			setCDataLen
			setCustomColor
			pop
			stop
		} if
		cleartomark
		mark 6
		{
			9 index
		} repeat
		testTopCC dup /blend? xs
		{
			/blend? 1 index 1 ne store
			/endC? blend? store
			/startC? false store
			blend? not
			{
				cleartomark stop
			} if
			/cData tint2Data store
			setCDataLen
		} if
		cleartomark
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/getRData
{
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
%	(between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			7
		} ifelse
	} ifelse
	index 100 div /endPoint xs
	/blend?
	rampPoint endPoint sub
	0
	cBType 0 eq
	{
		lt
	}
	{
		gt
	} ifelse
	store
	/colorType gMark store
	/color? colorType 0 gt store
	colorType dup 3 eq
	{
		/tint2Data gMark store
	} if
	dup 1 gt
	{
		/tint1Data gMark store
	} if
	/cData gMark store
	setCDataLen
	0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	/white? false store
	dup 2 lt
	{
		dup 0 eq
		{
			1 index 1 eq
		}
		{
			5 copy pop add add add 0 eq
		} ifelse
		/white? xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
%
		bDataLen 0 eq {/bDataLen 1 store} if
%
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		clip
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
{
	/doBlend
	color?
	{
		/bCImg
	}
	{
		/blendImg
	} ifelse
	load
	store
	0 0 moveto
	tRectOK?
	{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
		}
		{
			and exch pop
			{
				newpath
				doRctBlend
			}
			{
				doBlend
			} ifelse
		} ifelse
	}
	{
		doBlend
	} ifelse
} bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis
	1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
	store
	/pChange
	bDataLen
	ubAxis
	div
	store
	pChange .5 gt dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where
	{
		pop 0 0 bInc 1 /rectfill cvx
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		systemdict /fill get
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop
		store
		/pChange
		bDataLen
		ubAxis
		div
		store
		pChange .5 gt dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx systemdict /fill get
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
	 end
	} if
} bd
/Bn
{
	1 add dict
	dup nullString null put
	/_bn xs
} bd
/Bd
{
	Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	/_fill /fill load store
	/fill
	{
	} def
} bd
/BB
{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI5 1.0 0
%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (3/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI5_vars 70 dict dup begin
put
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_IllustratorA_AI5 74 dict dup begin
put
/initialize
{
	Adobe_IllustratorA_AI5 dup begin
	Adobe_IllustratorA_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_IllustratorA_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			clip /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore clip newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore clip newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore clip newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	_pola 0 eq
	{
		newpath
	} if
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[
	] 0 setdash
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		fill
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		fill
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		fill
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	version cvx exec 38 gt
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef clip
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
			
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
currentdict readonly pop
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_IllustratorA_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
800 Ar
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (queen Gradient 1)
(queen Gradient 1) 0 3 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0 %_Br
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
1 0 50 100 %_Bs
0 0 50 50 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (queen Gradient 2)
(queen Gradient 2) 0 3 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
8282818180807F7E7E7D7D7C7C7B7B7A7A79797878777776767575747473737272717170706F6F6E
6E6D6D6C6C6B6B6A6A696968686767666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A
59595858575756565555545453535252515150504F4F4E4E4D4D4C4B4B4A4A494948484747464645
45444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A3939383837373636353534343332323131
30302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D
1C1C1B1B1A19191818171716161515141413131212111110100F0F0E0E0D0D0C0C0B0B0A0A090908
08070706060505040403030202010100
>
0
<
4E4D4D4D4D4C4C4C4B4B4B4A4A4A4A49494948484847474746464646454545444444434343424242
424141414040403F3F3F3F3E3E3E3D3D3D3C3C3C3B3B3B3B3A3A3A39393938383838373737363636
35353534343434333333323232313131303030302F2F2F2E2E2E2D2D2D2D2C2C2C2B2B2B2A2A2A29
29292928282827272726262626252525242424232323222222222121212020201F1F1F1E1E1E1E1D
1D1D1C1C1C1B1B1B1B1A1A1A19191918181817171717161616151515141414141313131212121111
11101010100F0F0F0E0E0E0D0D0D0D0C0C0C0B0B0B0A0A0A09090909080808070707060606050505
05040404030303020202020101010000
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
2 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
000101020203030404050506060707080809090A0A0B0B0C0C0D0D0E0E0F0F101011111212131314
14151516161717181819191A1B1B1C1C1D1D1E1E1F1F202021212222232324242525262627272828
29292A2A2B2B2C2C2D2D2E2E2F2F303031313232333434353536363737383839393A3A3B3B3C3C3D
3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4D4D4E4E4F4F50505151
525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F606061616262636364646565
666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A
7A7B7B7C7C7D7D7E7E7F808081818282
>
0
<
00000101010202020203030304040405050505060606070707080808090909090A0A0A0B0B0B0C0C
0C0D0D0D0D0E0E0E0F0F0F1010101011111112121213131314141414151515161616171717171818
181919191A1A1A1B1B1B1B1C1C1C1D1D1D1E1E1E1E1F1F1F20202021212122222222232323242424
25252526262626272727282828292929292A2A2A2B2B2B2C2C2C2D2D2D2D2E2E2E2F2F2F30303030
31313132323233333334343434353535363636373737383838383939393A3A3A3B3B3B3B3C3C3C3D
3D3D3E3E3E3F3F3F3F40404041414142424242434343444444454545464646464747474848484949
494A4A4A4A4B4B4B4C4C4C4D4D4D4D4E
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
2 %_Br
[
1 0 50 100 %_Bs
1 0.51 0 0.305 (PANTONE 541 CV) 0 3 50 50 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Red & Yellow)
(Red & Yellow) 0 2 Bd
[
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EF
EFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BF
BFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AF
AFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F
9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999
>
0
1 %_Br
[
0 1 0.6 0 1 50 100 %_Bs
0 0 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Blue Radial)
(Yellow & Blue Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_Bs
1 1 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
81 93 Pb
Pn
Pc
1 g
Pc
0 g
Pc
0 0 0 0 k
Pc
0.75 g
Pc
0.5 g
Pc
0.25 g
Pc
0 g
Pc
Bb
2 (Black & White) -4176 4580.5 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0 0 0 k
Pc
0.5 0 0 0 k
Pc
0.75 0 0 0 k
Pc
1 0 0 0 k
Pc
0.25 0.25 0 0 k
Pc
0.5 0.5 0 0 k
Pc
0.75 0.75 0 0 k
Pc
1 1 0 0 k
Pc
Bb
2 (Red & Yellow) -4176 4580.5 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0.25 0 0 k
Pc
0 0.5 0 0 k
Pc
0 0.75 0 0 k
Pc
0 1 0 0 k
Pc
0 0.25 0.25 0 k
Pc
0 0.5 0.5 0 k
Pc
0 0.75 0.75 0 k
Pc
0 1 1 0 k
Pc
Bb
0 0 0 0 Bh
2 (Yellow & Blue Radial) -4176 4580.5 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0 0.25 0 k
Pc
0 0 0.5 0 k
Pc
0 0 0.75 0 k
Pc
0 0 1 0 k
Pc
0.25 0 0.25 0 k
Pc
0.5 0 0.5 0 k
Pc
0.75 0 0.75 0 k
Pc
1 0 1 0 k
Pc
(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
Pc
0.25 0.125 0 0 k
Pc
0.5 0.25 0 0 k
Pc
0.75 0.375 0 0 k
Pc
1 0.5 0 0 k
Pc
0.125 0.25 0 0 k
Pc
0.25 0.5 0 0 k
Pc
0.375 0.75 0 0 k
Pc
0.5 1 0 0 k
Pc
0 0 0 0 k
Pc
0 0.25 0.125 0 k
Pc
0 0.5 0.25 0 k
Pc
0 0.75 0.375 0 k
Pc
0 1 0.5 0 k
Pc
0 0.125 0.25 0 k
Pc
0 0.25 0.5 0 k
Pc
0 0.375 0.75 0 k
Pc
0 0.5 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0 0.25 0 k
Pc
0.25 0 0.5 0 k
Pc
0.375 0 0.75 0 k
Pc
0.5 0 1 0 k
Pc
0.25 0 0.125 0 k
Pc
0.5 0 0.25 0 k
Pc
0.75 0 0.375 0 k
Pc
1 0 0.5 0 k
Pc
0 0 0 0 k
Pc
0.25 0.125 0.125 0 k
Pc
0.5 0.25 0.25 0 k
Pc
0.75 0.375 0.375 0 k
Pc
1 0.5 0.5 0 k
Pc
0.25 0.25 0.125 0 k
Pc
0.5 0.5 0.25 0 k
Pc
0.75 0.75 0.375 0 k
Pc
1 1 0.5 0 k
Pc
0 0 0 0 k
Pc
0.125 0.25 0.125 0 k
Pc
0.25 0.5 0.25 0 k
Pc
0.375 0.75 0.375 0 k
Pc
0.5 1 0.5 0 k
Pc
0.125 0.25 0.25 0 k
Pc
0.25 0.5 0.5 0 k
Pc
0.375 0.75 0.75 0 k
Pc
0.5 1 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0.125 0.25 0 k
Pc
0.25 0.25 0.5 0 k
Pc
0.375 0.375 0.75 0 k
Pc
0.5 0.5 1 0 k
Pc
0.25 0.125 0.25 0 k
Pc
0.5 0.25 0.5 0 k
Pc
0.75 0.375 0.75 0 k
Pc
1 0.5 1 0 k
Pc
0 0 0 0 k
Pc
Pc
Pc
Pc
0 0 0 0.38 (PANTONE 877) 0 x
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
0 O
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
132.3667 362.424 m
128.7667 371.024 122.3833 379.5948 114.9833 386.6948 C
110.6417 390.474 L
91.9417 404.774 68.6667 410.524 44.5667 411.824 C
17.1 412.624 8.975 409.624 v
8.7667 465.124 l
14.6417 466.749 36.8667 462.224 Y
108.6667 444.1573 130.2875 390.4198 132.3875 385.8198 C
132.4537 385.7658 L
134.5538 390.3658 156.1746 444.1658 227.9746 462.2324 C
250.1996 466.7574 256.0746 465.1324 v
255.8663 409.6324 l
247.7413 412.6324 220.2746 411.8324 Y
196.1746 410.5324 172.8996 404.7824 154.1996 390.4824 C
149.8579 386.7033 L
142.4579 379.6033 136.0746 371.0324 132.4746 362.4324 C
132.3667 362.424 L
Bb
1 (queen Gradient 1) 8.7667 272.1621 0 247.3079 1 0 0 1 0 -141.7323 Bg
12063.9994 0 0 -108.3334 -12055.2327 468.7574 Bc
123.6539 0 0 -108.3334 8.7667 468.7574 Bm
123.6539 0 0 -108.3334 132.4206 468.7574 Bm
12063.9994 0 0 -108.3334 256.0746 468.7574 Bc
f
0 BB
132.7198 354.1731 m
136.32 345.5732 142.7034 337.0025 150.1035 329.9026 C
154.4453 326.1235 L
173.1455 311.8238 196.4206 306.0741 220.5206 304.7745 C
247.9873 303.9749 256.1122 306.975 v
256.3214 251.475 l
250.4464 249.8499 228.2214 254.3746 Y
156.4211 272.4402 134.7994 326.1774 132.6994 330.7773 C
132.6331 330.8313 L
130.5332 326.2313 108.9132 272.431 37.1135 254.3632 C
14.8885 249.8379 9.0135 251.4628 v
9.221 306.9628 l
17.346 303.9629 44.8127 304.7633 Y
68.9127 306.0637 92.1876 311.8141 110.8874 326.1143 C
115.229 329.8936 L
122.6289 336.9937 129.0121 345.5646 132.6119 354.1647 C
132.7198 354.1731 L
Bb
1 (queen Gradient 1) 9.0135 160.9695 0 247.3079 1 0 0 1 0 -141.7323 Bg
12063.9994 0 0 -108.3352 -12054.9859 356.1731 Bc
123.6539 0 0 -108.3352 9.0135 356.1731 Bm
123.6539 0 0 -108.3352 132.6674 356.1731 Bm
12063.9994 0 0 -108.3352 256.3214 356.1731 Bc
f
0 BB
u
0 g
130.8 603.9323 m
133.2 603.2323 135.8625 604.0073 137.7625 605.6073 C
139.7625 607.4073 140.6875 610.4573 139.9875 613.2573 C
139.325 617.3198 134.6 618.6323 Y
134.5125 622.1323 L
138.25 622.1323 L
138.3 624.9323 L
134.65 624.9323 L
134.65 629.1198 L
131.3 629.1323 L
131.2875 624.9323 L
127.45 624.9448 L
127.4375 622.1323 L
131.1375 622.1323 L
131.1625 618.7448 L
128.2 617.7323 127.1 616.3323 v
125.5 614.3323 124.6 611.5323 125.6 609.0323 C
126.2 606.6323 128.5 604.5323 130.8 603.9323 c
f
126.8 594.3323 m
127.7 591.1323 128.2 587.6323 128.8 584.3323 C
130.3 584.7323 131.4 586.3323 133 586.5323 C
136.7 583.8323 L
137.6 587.1323 138.1 590.7323 138.9 594.1323 C
139.2 594.3323 L
143.6 594.0323 147.8 593.3323 151.7 591.9323 c
158.6 589.6323 165 585.1323 169.1 578.9323 C
174.3 582.2323 L
173.4 584.2323 171.8 585.9323 170.4 587.7323 C
161.6 596.6323 145.4666 601.3323 133.2333 601.4656 c
120.3333 601.2656 105.5 598.5323 94.1 586.7323 C
93.1375 585.3823 92.0375 584.1198 91.25 582.3573 C
93.05 581.2573 94.8 579.9323 96.6 579.1323 C
103.4 589.4323 115.1 593.1323 126.8 594.3323 C
f
87.6 578.0323 m
98.7 540.8323 L
166.8 540.7323 L
178.1 578.1323 L
177.9 578.4323 L
175.4 576.6323 172.6 575.5323 170.1 573.7323 C
169.4 572.1323 169.4916 570.7656 168.5 568.8323 C
168 569.5323 167.6 570.3323 167.1 571.1323 C
165.7 572.2323 164.1 572.3323 162.4 571.9323 C
159.8 571.1323 158.7 568.6323 158 566.4323 c
157.1 563.5323 158.3 560.5323 160.1 558.3323 C
160.7 558.1323 161.3 558.2323 161.8 558.6323 C
162.1 560.1323 162 561.8323 163.2 563.0323 c
164 563.8323 165.2 564.0323 166.4 563.7323 C
166.8 563.4323 167 562.9323 167.3 562.5323 C
167.8 560.8323 167.1 559.3323 166.5 558.0323 C
165.2 555.9323 163 554.6323 160.7 554.9323 c
158.3 555.2323 156.2 556.8323 154.8 558.9323 C
153.6 561.2323 153.7 564.4323 154.7 566.7323 C
155.2 566.8323 158.3 568.1073 157.6 570.6323 C
157.2 571.5323 155.6 572.6323 Y
156.2 580.2323 L
152.2 580.3323 L
150.8 573.6323 L
148.6 572.7323 147.8 571.8323 v
147.2 571.1323 146.9 570.2323 147 569.3323 C
147.4 568.2323 148.5 567.5323 149.4 567.0323 C
149.4 562.3323 147.2 557.5323 142.7 555.5323 c
140.9 554.7323 138.8 555.1323 137.4 556.5323 C
136.3 558.0323 135.5 559.9323 136.2 561.8323 C
136.6 563.1323 137.9 563.5323 139.1 563.6323 C
139.8 563.4323 140.5 562.8323 140.8 562.2323 C
141 561.1323 140.9 559.9323 140.4 558.9323 C
140.6 558.5323 141.1 558.2323 141.6 558.3323 C
143.8 559.0323 145.6 561.4323 145.8 563.7323 C
146.5 566.2323 145.8 568.8323 144.3 570.7323 C
143 572.1323 141 572.6323 139.2 572.0323 C
137.35 571.8073 136.3 569.5323 135.4 569.4323 C
135 571.1323 136.3 572.4323 136.7 573.9323 C
138 576.9323 135.3 579.2323 133.4 581.3323 C
132.5 581.3323 L
130.9 579.4323 128.5 577.6323 128.8 575.1323 C
129.1 573.2323 130.3 571.2323 130 569.5323 C
128.9 570.4323 127.5 571.7323 125.9 572.0323 C
123.9 571.9323 121.9 571.4323 120.8 569.5323 c
118.9 566.4323 119.5 562.2323 121.6 559.4323 C
122.4 558.5323 123.5 557.9323 124.7 558.3323 C
125.1 559.3323 124.5 560.6323 124.7 561.8323 C
125 562.5323 125.4 563.4323 126.3 563.7323 C
127.5 564.2323 128.5 563.5323 129.3 562.5323 C
130.3 560.7323 129.5 558.4323 128.4 556.9323 C
127 555.7323 125.3 554.7323 123.4 555.0323 C
118.8 556.4323 117 561.2323 116.2 565.7323 C
115.1 568.3323 119.2 568.1323 118.1 570.8323 C
117.9 572.2323 115.2 572.9323 Y
113.3 580.3323 L
109.4 580.2323 L
110.6057 573.5968 110.175 572.9573 v
109.7625 572.3448 109.3 572.3823 108.6 571.7323 C
107.8 570.9323 108.05 570.0323 108.2 569.0323 C
108.7 567.3323 110.5 567.8323 111.4 566.6323 C
112.1 562.9323 111.4 559.1323 108.8 556.5323 C
107.3 555.1323 105.4 554.6323 103.4 554.9323 C
101.1 555.1323 99.6 556.8323 98.6 558.6323 C
98 560.1323 97.9 561.9323 99.2 563.1323 C
99.7 563.7323 100.7 564.0323 101.4 563.5323 C
103.2 562.7323 103.4 560.6323 103.6 558.8323 C
103.8 558.4323 104.3 557.9323 104.9 558.1323 C
106.8 559.4323 107.6 561.5323 107.9 563.7323 C
107.7 566.8323 107 570.0323 104 571.7323 C
102.5 572.3323 100.5 572.0323 99.3 571.1323 C
98.3 570.3323 97.9 569.0323 96.9 568.5323 C
96.55 570.2573 96.1 571.7323 95.7 573.3323 C
87.8 578.1323 L
87.6 578.0323 L
f
*u
1 D
279.3 363.0323 m
276.3 370.9323 268 375.3323 260.7 377.5323 C
234.1 383.1323 209 373.7323 187.4 361.9323 C
166.5 375.0323 148.2 396.2323 136.4 417.1323 C
139.8 422.7323 142.1 428.8323 144.8 434.7323 C
152.2 453.4323 158.8 478.3323 149.3 498.2323 C
145.8 504.7323 139.1 511.5323 130.7 510.3323 C
118.7 507.9323 113.6 495.3323 112 484.4323 C
110.6 461.7323 117.4 441.3323 126.2 422.3323 C
113.4 400.4323 94.4 380.3323 73.5 365.4323 C
65.6 368.9323 57.6 372.4323 49.2 375.0323 C
31.1 379.7323 7.7 384.9323 -8 371.5323 C
-12.6 367.3323 -15.5 361.2323 -13.5 354.8323 C
-9.3 343.0323 3.6 339.1323 14.8 337.8323 C
38.3 337.1323 59 343.9323 77.9 354.7323 C
98.9 341.5323 116.3 321.3323 128.8 300.2323 C
124.4 292.3323 120.6 284.1323 117.6 275.6323 c
111.5 257.9323 106.2 233.4323 117 216.2323 c
120.7 210.7323 126.5 206.1323 133.5 206.7323 c
143.3 207.8323 148.8 217.6323 151.2 225.9323 C
156.5 250.3323 148.4 273.5323 139.1 294.1323 C
138 295.7323 140.1 296.8323 140.6 298.2323 C
154.5 318.7323 171.3 337.6323 192 351.6323 C
198.8 348.1323 205.8 345.3323 213 342.9323 C
231.7 337.7323 258.4 331.2323 274.7 346.2323 C
279.1 350.6323 281.4 356.9323 279.3 363.0323 c
f
0 D
66.3 361.4323 m
46.9 351.7323 21.9 344.7323 -0.4 352.9323 C
-3.8 354.6323 -8.3 356.8323 -8.5 361.2323 C
-6.9 370.4323 3.2 373.5323 11 375.0323 C
31.4 376.9323 49.7 370.7323 66.3 361.7323 C
66.3 361.4323 L
f
116.4 480.6323 m
117.4 489.1323 119.5 497.5323 126.2 503.4323 C
127.8 504.4323 129.9 504.8323 132 504.5323 C
134.3 503.8323 136.3 501.8323 137.6 499.8323 C
146 484.6323 141.8 463.5323 137.4 447.8323 C
135.1 441.5323 133 435.1323 130 429.1323 C
122 444.8323 115.9 461.3323 116.4 480.6323 C
f
139.7 278.7323 m
147.5 260.7323 154.2 233.9323 141.3 216.1323 C
139 213.6323 136.1 211.7323 132.5 212.5323 C
126.4 215.1323 125.1 222.0323 123.6 227.7323 C
120.3 249.4323 126.3 270.2323 134.9 288.5323 C
137 285.5323 138.1 282.0323 139.7 278.7323 C
f
132.6 306.5323 m
120.6 326.3323 104.6 345.7323 84.5 358.7323 C
102.7 372.6323 118.4 389.7323 131.2 408.7323 C
132.4 410.4323 L
144.5 390.2323 160.7 371.3323 180.8 357.8323 C
161.7 343.8323 145.4 325.9323 132.6 306.5323 C
f
274.4 354.0323 m
270.8 345.2323 261 342.8323 252.5 341.6323 C
234.1 340.2323 217.9 346.2323 202.5 353.1323 c
201.2 353.7323 200.1 354.5323 198.9 355.2323 C
217.6 364.6323 240.6 370.8323 263.1 365.1323 c
266.6 364.1323 270.1 362.6323 272.9 360.0323 C
274.5 358.4323 274.6 356.2323 274.4 354.0323 C
f
*U
120.125 603.4102 m
122.0288 603.4102 123.5721 604.9535 123.5721 606.8573 c
123.5721 608.7611 122.0288 610.3044 120.125 610.3044 c
118.2212 610.3044 116.6778 608.7611 116.6778 606.8573 c
116.6778 604.9535 118.2212 603.4102 120.125 603.4102 c
f
111.375 601.2227 m
113.2788 601.2227 114.8221 602.766 114.8221 604.6698 c
114.8221 606.5736 113.2788 608.1169 111.375 608.1169 c
109.4712 608.1169 107.9278 606.5736 107.9278 604.6698 c
107.9278 602.766 109.4712 601.2227 111.375 601.2227 c
f
103.5 597.8477 m
105.4038 597.8477 106.9471 599.391 106.9471 601.2948 c
106.9471 603.1986 105.4038 604.7419 103.5 604.7419 c
101.5962 604.7419 100.0528 603.1986 100.0528 601.2948 c
100.0528 599.391 101.5962 597.8477 103.5 597.8477 c
f
96 593.3477 m
97.9038 593.3477 99.4471 594.891 99.4471 596.7948 c
99.4471 598.6986 97.9038 600.2419 96 600.2419 c
94.0962 600.2419 92.5528 598.6986 92.5528 596.7948 c
92.5528 594.891 94.0962 593.3477 96 593.3477 c
f
89.75 587.3477 m
91.6538 587.3477 93.1971 588.891 93.1971 590.7948 c
93.1971 592.6986 91.6538 594.2419 89.75 594.2419 c
87.8462 594.2419 86.3028 592.6986 86.3028 590.7948 c
86.3028 588.891 87.8462 587.3477 89.75 587.3477 c
f
145.5625 603.0039 m
147.4662 603.0039 149.0096 604.5473 149.0096 606.4511 c
149.0096 608.3548 147.4662 609.8982 145.5625 609.8982 c
143.6587 609.8982 142.1153 608.3548 142.1153 606.4511 c
142.1153 604.5473 143.6587 603.0039 145.5625 603.0039 c
f
154.3125 600.8164 m
156.2162 600.8164 157.7596 602.3598 157.7596 604.2636 c
157.7596 606.1673 156.2162 607.7107 154.3125 607.7107 c
152.4087 607.7107 150.8653 606.1673 150.8653 604.2636 c
150.8653 602.3598 152.4087 600.8164 154.3125 600.8164 c
f
162.1875 597.4414 m
164.0912 597.4414 165.6346 598.9848 165.6346 600.8886 c
165.6346 602.7923 164.0912 604.3357 162.1875 604.3357 c
160.2837 604.3357 158.7403 602.7923 158.7403 600.8886 c
158.7403 598.9848 160.2837 597.4414 162.1875 597.4414 c
f
169.6875 592.9414 m
171.5912 592.9414 173.1346 594.4848 173.1346 596.3886 c
173.1346 598.2923 171.5912 599.8357 169.6875 599.8357 c
167.7837 599.8357 166.2403 598.2923 166.2403 596.3886 c
166.2403 594.4848 167.7837 592.9414 169.6875 592.9414 c
f
175.9375 586.9414 m
177.8412 586.9414 179.3846 588.4848 179.3846 590.3886 c
179.3846 592.2923 177.8412 593.8357 175.9375 593.8357 c
174.0337 593.8357 172.4903 592.2923 172.4903 590.3886 c
172.4903 588.4848 174.0337 586.9414 175.9375 586.9414 c
f
U
*u
9.1796 137.6665 m
9.1796 135.367 9.8872 134.35 13.0268 134.35 c
14.0881 134.35 L
14.0881 132.6254 L
-1.8311 132.6254 L
-1.8311 134.35 L
-0.3276 134.35 L
2.1044 134.35 3.0773 135.3228 3.0773 137.6665 c
3.0773 157.8308 L
-2.1407 157.8308 L
-5.5456 157.8308 -6.0762 157.3001 -6.9164 152.6128 c
-8.7294 152.6128 L
-7.9335 160.882 L
-6.5184 160.882 L
-6.1647 160.5724 -5.9436 160.3513 -5.6783 160.2629 c
-5.3687 160.1744 -5.015 160.1302 -4.3959 160.1302 c
16.6528 160.1302 L
17.8468 160.1302 18.0679 160.2187 18.7754 160.882 c
20.1904 160.882 L
20.9864 152.6128 L
19.1734 152.6128 L
18.3332 157.2559 17.8025 157.8308 14.3976 157.8308 c
9.1796 157.8308 L
9.1796 137.6665 l
f
*U
*u
41.0336 133.9191 m
42.7918 133.9191 43.5216 134.6821 43.5216 136.4734 c
43.5216 142.3781 L
32.5746 142.3781 L
32.5746 136.4071 L
32.5746 134.6489 33.2712 133.9191 35.1289 133.9191 c
35.6265 133.9191 L
35.6265 132.6254 L
24.9781 132.6254 L
24.9781 133.9191 L
25.542 133.9191 L
27.2338 133.9191 27.9968 134.6821 27.9968 136.3407 c
27.9968 149.5434 L
27.9968 151.2021 27.267 151.965 25.5088 151.965 c
24.9781 151.965 L
24.9781 153.2588 L
35.6265 153.2588 L
35.6265 151.965 L
35.1621 151.965 L
33.4371 151.965 32.5746 151.4011 32.5746 149.5434 c
32.5746 144.3353 L
43.5216 144.3353 L
43.5216 149.4439 L
43.5216 151.3016 42.7918 151.965 40.8677 151.965 c
40.5692 151.965 L
40.5692 153.2588 L
51.1844 153.2588 L
51.1844 151.965 L
50.5873 151.965 L
48.8955 151.965 48.0994 151.3347 48.0994 149.5434 c
48.0994 136.4071 L
48.0994 134.6821 48.7297 133.9191 50.6537 133.9191 c
51.1844 133.9191 L
51.1844 132.6254 L
40.5692 132.6254 L
40.5692 133.9191 L
41.0336 133.9191 l
f
*U
*u
69.4148 151.4343 m
62.15 151.4343 L
62.15 143.9704 L
67.5239 143.9704 L
69.3484 143.9704 70.0119 144.6007 70.0119 146.3589 c
71.3388 146.3589 L
71.3388 139.7575 L
70.0119 139.7575 L
70.0119 141.5488 69.5806 142.1459 67.0263 142.1459 c
62.15 142.1459 L
62.15 136.1749 L
62.15 134.7484 62.4154 134.4499 63.3774 134.4499 c
68.9172 134.4499 L
71.0734 134.4499 72.1018 135.047 72.732 137.8335 c
73.9926 137.8335 L
73.5945 132.6254 L
53.6246 132.6254 L
53.6246 133.9191 L
54.9847 133.9191 L
56.9087 133.9191 57.5722 134.6821 57.5722 136.3076 c
57.5722 149.5434 L
57.5722 151.3347 56.975 151.965 54.6861 151.965 c
54.3544 151.965 L
54.3544 153.2588 L
72.6325 153.2588 L
72.9642 148.4487 L
71.7037 148.4487 l
71.372 150.7045 70.9407 151.4343 69.4148 151.4343 c
f
*U
*u
132.7036 122.8528 m
131.775 122.6317 131.3328 122.5875 130.2273 122.5875 c
120.9853 122.5875 116.2538 130.945 110.859 132.7581 c
104.3586 134.4384 100.1577 139.6564 100.1577 146.0683 c
100.1577 154.6912 107.3214 160.9704 117.094 160.9704 c
126.3359 160.9704 132.8805 155.1776 132.8805 146.9527 c
132.8805 139.391 127.2203 133.952 120.9411 132.6254 c
125.8937 129.6184 127.8394 124.6658 133.4554 124.5774 C
132.7036 122.8528 l
f
1 D
117.2266 133.8636 m
123.7712 133.8636 126.2917 139.7006 126.2917 145.4492 c
126.2917 151.242 123.3732 159.0689 115.9885 159.0689 c
110.3725 159.0689 106.7465 154.7354 106.7465 148.0582 c
106.7465 139.6121 110.9916 133.8636 117.2266 133.8636 c
f
*U
*u
0 D
153.7671 153.2588 m
162.3588 153.2588 L
162.3588 151.965 L
162.1266 151.965 L
159.4728 151.965 159.0747 150.804 159.0747 149.2117 c
159.0747 140.9517 L
159.0747 133.5542 153.7007 132.161 149.7532 132.161 c
143.7821 132.161 140.0005 134.7484 140.0005 139.8238 c
140.0005 149.7093 L
140.0005 151.3679 139.536 151.965 137.6784 151.965 c
137.1144 151.965 L
137.1144 153.2588 L
147.4975 153.2588 L
147.4975 151.965 L
146.9335 151.965 L
145.5403 151.965 144.5783 151.3347 144.5783 149.7093 c
144.5783 139.8238 L
144.5783 135.7768 147.5638 134.3835 150.5825 134.3835 c
154.9281 134.3835 157.0843 136.8383 157.0843 140.4873 c
157.0843 148.5482 L
157.0843 150.9035 156.4209 151.965 154.3642 151.965 c
153.7671 151.965 L
153.7671 153.2588 l
f
*U
*u
179.5691 151.4343 m
172.3043 151.4343 L
172.3043 143.9704 L
177.6782 143.9704 L
179.5027 143.9704 180.1662 144.6007 180.1662 146.3589 c
181.4931 146.3589 L
181.4931 139.7575 L
180.1662 139.7575 L
180.1662 141.5488 179.735 142.1459 177.1807 142.1459 c
172.3043 142.1459 L
172.3043 136.1749 L
172.3043 134.7484 172.5697 134.4499 173.5317 134.4499 c
179.0715 134.4499 L
181.2277 134.4499 182.2561 135.047 182.8863 137.8335 c
184.1469 137.8335 L
183.7488 132.6254 L
163.7789 132.6254 L
163.7789 133.9191 L
165.139 133.9191 L
167.063 133.9191 167.7265 134.6821 167.7265 136.3076 c
167.7265 149.5434 L
167.7265 151.3347 167.1294 151.965 164.8404 151.965 c
164.5087 151.965 L
164.5087 153.2588 L
182.7868 153.2588 L
183.1186 148.4487 L
181.858 148.4487 l
181.5263 150.7045 181.095 151.4343 179.5691 151.4343 c
f
*U
*u
202.3201 151.4343 m
195.0553 151.4343 L
195.0553 143.9704 L
200.4293 143.9704 L
202.2538 143.9704 202.9172 144.6007 202.9172 146.3589 c
204.2441 146.3589 L
204.2441 139.7575 L
202.9172 139.7575 L
202.9172 141.5488 202.486 142.1459 199.9317 142.1459 c
195.0553 142.1459 L
195.0553 136.1749 L
195.0553 134.7484 195.3207 134.4499 196.2827 134.4499 c
201.8225 134.4499 L
203.9788 134.4499 205.0071 135.047 205.6374 137.8335 c
206.8979 137.8335 L
206.4999 132.6254 L
186.53 132.6254 L
186.53 133.9191 L
187.89 133.9191 L
189.8141 133.9191 190.4775 134.6821 190.4775 136.3076 c
190.4775 149.5434 L
190.4775 151.3347 189.8804 151.965 187.5915 151.965 c
187.2598 151.965 L
187.2598 153.2588 L
205.5379 153.2588 L
205.8696 148.4487 L
204.609 148.4487 l
204.2773 150.7045 203.8461 151.4343 202.3201 151.4343 c
f
*U
*u
214.8872 136.6061 m
214.8872 134.5826 215.5175 133.9191 218.1713 133.9191 c
218.1713 132.6254 L
210.1435 132.6254 L
210.1435 133.9191 L
210.3425 133.9191 L
212.3661 133.9191 212.8636 134.6489 212.8636 136.009 c
212.8636 151.2352 L
212.1338 151.7328 211.2382 151.965 210.2098 151.965 c
210.2098 153.2588 L
217.0434 153.2588 L
230.5778 139.1272 L
230.5778 149.1454 L
230.5778 151.5338 230.0802 151.965 227.4264 151.965 c
227.0947 151.965 L
227.0947 153.2588 L
235.6532 153.2588 L
235.6532 151.965 L
235.3215 151.965 L
233.2648 151.965 232.6013 151.5338 232.6013 150.2732 c
232.6013 132.5259 L
230.7769 132.5259 L
214.8872 149.1454 L
214.8872 136.6061 l
f
*U
*u
241.3731 150.8882 m
244.2032 151.1093 246.2373 152.6128 246.2373 154.5585 c
246.2373 155.6198 245.2203 155.0891 244.1148 155.0891 c
241.9922 155.0891 240.7983 156.2389 240.7983 158.0077 c
240.7983 159.7765 242.1691 160.9704 244.2032 160.9704 c
247.1217 160.9704 248.979 158.9805 248.979 155.8851 c
248.979 151.8611 245.9278 148.9426 241.7269 149.031 C
241.3731 150.8882 l
f
*U
*u
256.3851 138.7292 m
257.6789 138.7292 L
258.7736 135.4451 260.7307 133.7533 263.3514 133.7533 c
265.5408 133.7533 267.1994 135.1465 267.1994 137.0042 c
267.1994 141.9469 256.551 141.781 256.551 148.3492 c
256.551 151.5338 259.3375 153.7563 263.285 153.7563 c
265.8393 153.7563 267.8297 152.8939 268.3273 152.8939 c
268.5595 152.8939 268.7585 152.9602 269.0571 153.2588 c
269.7537 153.2588 L
270.384 147.8848 L
269.0571 147.8848 L
268.3273 150.5718 266.2042 152.3299 263.6499 152.3299 c
261.7923 152.3299 260.399 151.3347 260.399 150.041 c
260.399 146.9891 265.9057 146.4252 269.621 142.7099 c
270.9811 141.3498 271.5118 139.9234 271.5118 138.3311 c
271.5118 134.8811 268.3936 132.161 264.4461 132.161 c
261.7923 132.161 259.3707 133.2225 258.7736 133.2225 c
258.475 133.2225 258.2428 133.0566 258.0769 132.6917 c
257.2144 132.6917 L
256.3851 138.7292 l
f
*U
*u
-80.6623 88.9821 m
-82.5195 83.8084 L
-83.3155 81.5532 -83.2713 80.4919 -79.0261 80.4919 c
-78.4513 80.4919 L
-78.4513 78.7673 L
-90.1696 78.7673 L
-90.1696 80.4919 L
-89.5063 80.4919 L
-87.3837 80.4919 -86.2782 81.4647 -85.1727 84.5601 c
-77.6111 105.653 L
-78.0975 106.9354 L
-71.553 106.9354 L
-62.709 84.4717 L
-61.5593 81.5532 -60.5864 80.6688 -58.287 80.4919 c
-58.287 78.7673 L
-72.6585 78.7673 L
-72.6585 80.4919 L
-71.1108 80.4919 L
-68.4134 80.4919 -68.0154 81.6858 -68.8998 83.8526 c
-70.9781 88.9821 L
-80.6623 88.9821 l
f
1 D
-76.0634 101.7617 m
-79.7779 91.4142 L
-71.9952 91.4142 L
-76.0634 101.7617 l
f
*U
*u
0 D
-49.8287 82.748 m
-49.8287 80.7245 -49.1985 80.061 -46.5447 80.061 c
-46.5447 78.7673 L
-54.5724 78.7673 L
-54.5724 80.061 L
-54.3734 80.061 L
-52.3499 80.061 -51.8523 80.7908 -51.8523 82.1509 c
-51.8523 97.3771 L
-52.5821 97.8747 -53.4777 98.1069 -54.5061 98.1069 c
-54.5061 99.4007 L
-47.6725 99.4007 L
-34.1381 85.2691 L
-34.1381 95.2873 L
-34.1381 97.6757 -34.6357 98.1069 -37.2895 98.1069 c
-37.6212 98.1069 L
-37.6212 99.4007 L
-29.0627 99.4007 L
-29.0627 98.1069 L
-29.3944 98.1069 L
-31.4511 98.1069 -32.1146 97.6757 -32.1146 96.4151 c
-32.1146 78.6678 L
-33.9391 78.6678 L
-49.8287 95.2873 L
-49.8287 82.748 l
f
*U
*u
-21.0085 82.748 m
-21.0085 80.7245 -20.3782 80.061 -17.7244 80.061 c
-17.7244 78.7673 L
-25.7522 78.7673 L
-25.7522 80.061 L
-25.5531 80.061 L
-23.5296 80.061 -23.032 80.7908 -23.032 82.1509 c
-23.032 97.3771 L
-23.7618 97.8747 -24.6575 98.1069 -25.6858 98.1069 c
-25.6858 99.4007 L
-18.8523 99.4007 L
-5.3179 85.2691 L
-5.3179 95.2873 L
-5.3179 97.6757 -5.8154 98.1069 -8.4692 98.1069 c
-8.801 98.1069 L
-8.801 99.4007 L
-0.2424 99.4007 L
-0.2424 98.1069 L
-0.5742 98.1069 L
-2.6309 98.1069 -3.2943 97.6757 -3.2943 96.4151 c
-3.2943 78.6678 L
-5.1188 78.6678 L
-21.0085 95.2873 L
-21.0085 82.748 l
f
*U
*u
3.0349 99.4007 m
13.5838 99.4007 L
13.5838 98.1069 L
13.0198 98.1069 L
11.2285 98.1069 10.4987 97.344 10.4987 95.619 c
10.4987 82.4826 L
10.4987 80.8572 11.0627 80.061 13.0862 80.061 c
13.5838 80.061 L
13.5838 78.7673 L
3.0349 78.7673 L
3.0349 80.061 L
3.4993 80.061 L
5.2575 80.061 5.9209 80.8903 5.9209 82.3499 c
5.9209 95.619 L
5.9209 97.344 5.3238 98.1069 3.4661 98.1069 c
3.0349 98.1069 L
3.0349 99.4007 l
f
*U
*u
20.0822 95.3204 m
18.9875 97.7089 18.5231 98.1069 16.6323 98.1069 c
16.4001 98.1069 L
16.4001 99.4007 L
27.9109 99.4007 L
27.9109 98.1069 L
27.347 98.1069 L
24.5605 98.1069 24.1293 97.1781 25.0581 95.2209 c
30.2662 84.1413 L
35.3416 96.2161 L
35.806 97.344 35.0431 98.1069 33.1522 98.1069 c
32.4888 98.1069 L
32.4888 99.4007 L
40.9146 99.4007 L
40.9146 98.1069 L
40.6824 98.1069 L
38.7252 98.1069 37.9954 97.2113 36.9007 94.5906 c
30.0008 78.3029 L
27.9109 78.3029 L
20.0822 95.3204 l
f
*U
*u
59.0207 97.5762 m
51.7559 97.5762 L
51.7559 90.1123 L
57.1299 90.1123 L
58.9544 90.1123 59.6178 90.7426 59.6178 92.5008 c
60.9447 92.5008 L
60.9447 85.8994 L
59.6178 85.8994 L
59.6178 87.6907 59.1866 88.2878 56.6323 88.2878 c
51.7559 88.2878 L
51.7559 82.3168 L
51.7559 80.8903 52.0213 80.5918 52.9833 80.5918 c
58.5231 80.5918 L
60.6793 80.5918 61.7077 81.1889 62.338 83.9754 c
63.5985 83.9754 L
63.2005 78.7673 L
43.2305 78.7673 L
43.2305 80.061 L
44.5906 80.061 L
46.5146 80.061 47.1781 80.824 47.1781 82.4495 c
47.1781 95.6853 L
47.1781 97.4766 46.581 98.1069 44.2921 98.1069 c
43.9603 98.1069 L
43.9603 99.4007 L
62.2384 99.4007 L
62.5702 94.5906 L
61.3096 94.5906 l
60.9779 96.8464 60.5466 97.5762 59.0207 97.5762 c
f
*U
*u
75.5681 82.4826 m
75.5681 80.7908 76.2979 80.061 78.1887 80.061 c
79.1839 80.061 L
79.1839 78.7673 L
67.5735 78.7673 L
67.5735 80.061 L
68.1042 80.061 L
70.1278 80.061 70.9902 80.5586 70.9902 82.4826 c
70.9902 95.5858 L
70.9902 97.1781 70.559 98.1069 68.3364 98.1069 c
67.6398 98.1069 L
67.6398 99.4007 L
69.2984 99.5002 70.559 99.5665 71.9191 99.666 c
73.7767 99.7987 76.1652 99.8983 77.3594 99.8983 c
82.2358 99.8983 84.8896 99.268 86.5482 97.6093 c
87.6429 96.5146 88.1405 95.2541 88.1405 93.8277 c
88.1405 91.3065 86.316 89.3162 83.2309 88.4869 c
85.4203 86.6624 86.5814 84.0417 88.9366 81.6865 c
90.2967 80.3264 91.2255 79.9283 93.3154 79.7293 c
93.3154 78.4356 L
92.5856 78.4024 92.2539 78.4024 91.2587 78.4024 c
87.1453 78.4024 85.4535 78.9995 83.8944 80.5586 c
82.2358 82.2173 80.3117 85.7004 78.1887 87.5249 c
75.5681 87.5249 L
75.5681 82.4826 l
f
1 D
75.5681 88.9181 m
76.8618 88.9181 L
80.8757 88.9181 83.1978 90.1455 83.1978 93.695 c
83.1978 97.2113 80.5108 98.4718 77.293 98.4718 c
75.5681 98.4718 L
75.5681 88.9181 l
f
*U
*u
0 D
96.9248 84.8711 m
98.2185 84.8711 L
99.3132 81.587 101.2704 79.8952 103.891 79.8952 c
106.0804 79.8952 107.7391 81.2884 107.7391 83.1461 c
107.7391 88.0888 97.0906 87.9229 97.0906 94.4911 c
97.0906 97.6757 99.8771 99.8983 103.8247 99.8983 c
106.379 99.8983 108.3693 99.0358 108.8669 99.0358 c
109.0991 99.0358 109.2982 99.1021 109.5967 99.4007 c
110.2933 99.4007 L
110.9236 94.0267 L
109.5967 94.0267 L
108.8669 96.7137 106.7439 98.4718 104.1896 98.4718 c
102.3319 98.4718 100.9387 97.4766 100.9387 96.1829 c
100.9387 93.131 106.4453 92.5671 110.1607 88.8518 c
111.5207 87.4917 112.0515 86.0653 112.0515 84.473 c
112.0515 81.023 108.9333 78.3029 104.9857 78.3029 c
102.3319 78.3029 99.9103 79.3644 99.3132 79.3644 c
99.0147 79.3644 98.7825 79.1985 98.6166 78.8336 c
97.7541 78.8336 L
96.9248 84.8711 l
f
*U
*u
122.9604 86.4302 m
121.5671 82.549 L
120.97 80.8572 121.0032 80.061 124.1877 80.061 c
124.619 80.061 L
124.619 78.7673 L
115.8282 78.7673 L
115.8282 80.061 L
116.3258 80.061 L
117.9181 80.061 118.7474 80.7908 119.5767 83.1129 c
125.2493 98.9362 L
124.8844 99.8983 L
129.7939 99.8983 L
136.4284 83.0466 L
137.2909 80.8572 138.0207 80.1937 139.7457 80.061 c
139.7457 78.7673 L
128.9646 78.7673 L
128.9646 80.061 L
130.1256 80.061 L
132.1492 80.061 132.4477 80.9567 131.7843 82.5821 c
130.2252 86.4302 L
122.9604 86.4302 l
f
1 D
126.4103 96.0171 m
123.6238 88.2547 L
129.4622 88.2547 L
126.4103 96.0171 l
f
*U
*u
0 D
150.2553 82.4826 m
150.2553 80.7908 150.9851 80.061 152.8759 80.061 c
153.8711 80.061 L
153.8711 78.7673 L
142.2607 78.7673 L
142.2607 80.061 L
142.7914 80.061 L
144.815 80.061 145.6774 80.5586 145.6774 82.4826 c
145.6774 95.5858 L
145.6774 97.1781 145.2462 98.1069 143.0236 98.1069 c
142.327 98.1069 L
142.327 99.4007 L
143.9856 99.5002 145.2462 99.5665 146.6063 99.666 c
148.4639 99.7987 150.8524 99.8983 152.0466 99.8983 c
156.923 99.8983 159.5768 99.268 161.2354 97.6093 c
162.3301 96.5146 162.8277 95.2541 162.8277 93.8277 c
162.8277 91.3065 161.0032 89.3162 157.9181 88.4869 c
160.1075 86.6624 161.2686 84.0417 163.6238 81.6865 c
164.9839 80.3264 165.9127 79.9283 168.0026 79.7293 c
168.0026 78.4356 L
167.2728 78.4024 166.9411 78.4024 165.9459 78.4024 c
161.8325 78.4024 160.1407 78.9995 158.5816 80.5586 c
156.923 82.2173 154.9989 85.7004 152.8759 87.5249 c
150.2553 87.5249 L
150.2553 82.4826 l
f
1 D
150.2553 88.9181 m
151.549 88.9181 L
155.5629 88.9181 157.885 90.1455 157.885 93.695 c
157.885 97.2113 155.198 98.4718 151.9802 98.4718 c
150.2553 98.4718 L
150.2553 88.9181 l
f
*U
*u
0 D
183.2564 82.5158 m
183.2564 80.9235 183.7539 80.061 186.1424 80.061 c
186.64 80.061 L
186.64 78.7673 L
175.3281 78.7673 L
175.3281 80.061 L
176.1574 80.061 L
178.1478 80.061 178.6785 80.9567 178.6785 82.4495 c
178.6785 87.0605 L
171.5464 96.5478 L
170.5844 97.8084 170.1864 98.1069 168.5277 98.1069 c
168.2955 98.1069 L
168.2955 99.4007 L
179.1098 99.4007 L
179.1098 98.1069 L
178.7117 98.1069 L
176.7877 98.1069 176.5223 97.3108 177.2189 96.4151 c
182.5266 89.4157 L
186.3746 95.4531 L
187.2371 96.8132 187.5025 98.1069 185.1804 98.1069 c
184.7823 98.1069 L
184.7823 99.4007 L
192.611 99.4007 L
192.611 98.1069 L
190.687 97.9742 190.1231 97.6093 188.9289 95.7848 c
183.2564 87.0605 L
183.2564 82.5158 l
f
*U
*u
223.0961 83.8084 m
223.0961 81.2436 224.0689 80.4919 226.9432 80.4919 c
228.2698 80.4919 L
228.2698 78.7673 L
213.235 78.7673 L
213.235 80.4919 L
213.8983 80.4919 L
216.3304 80.4919 216.9937 81.0225 216.9937 83.0124 c
216.9937 101.9828 L
216.9937 104.0169 216.3304 104.5475 213.8983 104.5475 c
212.9255 104.5475 L
212.9255 106.2721 L
214.6501 106.3606 217.0379 106.6259 220.0891 106.7585 c
223.0076 106.8912 225.8819 106.9796 227.1201 106.9796 c
235.6545 106.9796 239.2806 102.8672 239.2806 98.3125 c
239.2806 93.183 234.947 89.9107 228.1371 89.9107 c
226.5452 89.9107 224.9533 90.0434 223.0961 90.3529 C
223.0961 83.8084 l
f
1 D
223.0961 92.166 m
224.0247 91.9449 224.9975 91.8564 226.2799 91.8564 c
230.3924 91.8564 232.6918 94.2443 232.6918 98.5778 c
232.6918 102.6461 230.3039 105.034 226.2357 105.034 c
225.1744 105.034 224.1573 104.9455 223.0961 104.7244 C
223.0961 92.166 l
f
*U
*u
0 D
251.3215 82.4826 m
251.3215 80.7908 252.0513 80.061 253.9421 80.061 c
254.9373 80.061 L
254.9373 78.7673 L
243.3269 78.7673 L
243.3269 80.061 L
243.8577 80.061 L
245.8812 80.061 246.7437 80.5586 246.7437 82.4826 c
246.7437 95.5858 L
246.7437 97.1781 246.3124 98.1069 244.0899 98.1069 c
243.3932 98.1069 L
243.3932 99.4007 L
245.0519 99.5002 246.3124 99.5665 247.6725 99.666 c
249.5302 99.7987 251.9186 99.8983 253.1128 99.8983 c
257.9892 99.8983 260.643 99.268 262.3016 97.6093 c
263.3963 96.5146 263.8939 95.2541 263.8939 93.8277 c
263.8939 91.3065 262.0694 89.3162 258.9844 88.4869 c
261.1738 86.6624 262.3348 84.0417 264.6901 81.6865 c
266.0501 80.3264 266.979 79.9283 269.0688 79.7293 c
269.0688 78.4356 L
268.339 78.4024 268.0073 78.4024 267.0121 78.4024 c
262.8987 78.4024 261.2069 78.9995 259.6478 80.5586 c
257.9892 82.2173 256.0652 85.7004 253.9421 87.5249 c
251.3215 87.5249 L
251.3215 82.4826 l
f
1 D
251.3215 88.9181 m
252.6152 88.9181 L
256.6291 88.9181 258.9512 90.1455 258.9512 93.695 c
258.9512 97.2113 256.2642 98.4718 253.0465 98.4718 c
251.3215 98.4718 L
251.3215 88.9181 l
f
*U
*u
0 D
271.1857 99.4007 m
281.7346 99.4007 L
281.7346 98.1069 L
281.1707 98.1069 L
279.3793 98.1069 278.6495 97.344 278.6495 95.619 c
278.6495 82.4826 L
278.6495 80.8572 279.2135 80.061 281.237 80.061 c
281.7346 80.061 L
281.7346 78.7673 L
271.1857 78.7673 L
271.1857 80.061 L
271.6501 80.061 L
273.4083 80.061 274.0717 80.8903 274.0717 82.3499 c
274.0717 95.619 L
274.0717 97.344 273.4746 98.1069 271.617 98.1069 c
271.1857 98.1069 L
271.1857 99.4007 l
f
*U
*u
307.6387 78.7673 m
286.6405 78.7673 L
286.6405 80.5918 L
301.3691 97.5762 L
292.4457 97.5762 L
290.5217 97.5762 289.4933 96.6805 289.2611 93.8277 c
288.0006 93.8277 L
288.2328 99.4007 L
307.4065 99.4007 L
307.4065 97.5098 L
292.6779 80.5918 L
302.8287 80.5918 L
305.2503 80.5918 305.8806 81.6533 306.7763 85.4018 c
308.0368 85.4018 L
307.6387 78.7673 l
f
*U
*u
327.503 97.5762 m
320.2382 97.5762 L
320.2382 90.1123 L
325.6121 90.1123 L
327.4366 90.1123 328.1001 90.7426 328.1001 92.5008 c
329.427 92.5008 L
329.427 85.8994 L
328.1001 85.8994 L
328.1001 87.6907 327.6688 88.2878 325.1146 88.2878 c
320.2382 88.2878 L
320.2382 82.3168 L
320.2382 80.8903 320.5036 80.5918 321.4656 80.5918 c
327.0054 80.5918 L
329.1616 80.5918 330.19 81.1889 330.8202 83.9754 c
332.0808 83.9754 L
331.6827 78.7673 L
311.7128 78.7673 L
311.7128 80.061 L
313.0729 80.061 L
314.9969 80.061 315.6604 80.824 315.6604 82.4495 c
315.6604 95.6853 L
315.6604 97.4766 315.0633 98.1069 312.7743 98.1069 c
312.4426 98.1069 L
312.4426 99.4007 L
330.7207 99.4007 L
331.0525 94.5906 L
329.7919 94.5906 l
329.4602 96.8464 329.0289 97.5762 327.503 97.5762 c
f
*U
*u
336.9851 84.8711 m
338.2788 84.8711 L
339.3735 81.587 341.3307 79.8952 343.9513 79.8952 c
346.1407 79.8952 347.7994 81.2884 347.7994 83.1461 c
347.7994 88.0888 337.151 87.9229 337.151 94.4911 c
337.151 97.6757 339.9375 99.8983 343.885 99.8983 c
346.4393 99.8983 348.4296 99.0358 348.9272 99.0358 c
349.1594 99.0358 349.3585 99.1021 349.657 99.4007 c
350.3536 99.4007 L
350.9839 94.0267 L
349.657 94.0267 L
348.9272 96.7137 346.8042 98.4718 344.2499 98.4718 c
342.3922 98.4718 340.999 97.4766 340.999 96.1829 c
340.999 93.131 346.5056 92.5671 350.221 88.8518 c
351.581 87.4917 352.1118 86.0653 352.1118 84.473 c
352.1118 81.023 348.9936 78.3029 345.046 78.3029 c
342.3922 78.3029 339.9706 79.3644 339.3735 79.3644 c
339.075 79.3644 338.8428 79.1985 338.6769 78.8336 c
337.8144 78.8336 L
336.9851 84.8711 l
f
*U
*u
99.0367 8.5602 m
99.0367 7.2778 99.4347 6.5703 100.6728 6.5703 c
103.5029 6.5703 L
103.5029 5.0668 L
89.4409 5.0668 L
89.4409 6.5703 L
92.0941 6.5703 L
93.1996 6.5703 93.6418 7.2778 93.6418 8.3833 c
93.6418 27.7074 L
92.3152 26.823 90.1485 25.8502 88.4239 25.3638 c
87.849 26.6904 L
91.2982 28.3707 94.2167 30.5375 96.5604 33.2349 c
99.0367 33.2349 L
99.0367 8.5602 l
f
*U
*u
112.2586 5.8628 m
118.0072 7.72 121.0142 12.0978 122.0312 17.0946 c
120.2182 15.9891 119.0685 15.5912 117.4766 15.5912 c
113.0546 15.5912 109.915 19.0845 109.915 23.9487 c
109.915 29.2551 113.7179 33.2349 118.8032 33.2349 c
124.4633 33.2349 128.3547 28.9014 128.3547 21.4282 c
128.3547 13.1148 122.4292 6.2608 113.2757 4.4035 C
112.2586 5.8628 l
f
1 D
118.7147 17.6695 m
120.0413 17.6695 121.2795 18.2886 122.385 19.0403 c
122.5177 20.3669 122.6945 22.1357 122.6945 23.6834 c
122.6945 26.9999 122.1639 31.5988 118.8916 31.5988 c
115.8847 31.5988 115.5751 28.1496 115.5751 24.7447 c
115.5751 21.6935 115.5751 17.6695 118.7147 17.6695 c
f
*U
*u
0 D
136.1373 5.8628 m
141.8859 7.72 144.8929 12.0978 145.91 17.0946 c
144.0969 15.9891 142.9472 15.5912 141.3553 15.5912 c
136.9333 15.5912 133.7937 19.0845 133.7937 23.9487 c
133.7937 29.2551 137.5966 33.2349 142.6819 33.2349 c
148.3421 33.2349 152.2334 28.9014 152.2334 21.4282 c
152.2334 13.1148 146.3079 6.2608 137.1544 4.4035 C
136.1373 5.8628 l
f
1 D
142.5935 17.6695 m
143.9201 17.6695 145.1582 18.2886 146.2637 19.0403 c
146.3964 20.3669 146.5733 22.1357 146.5733 23.6834 c
146.5733 26.9999 146.0426 31.5988 142.7703 31.5988 c
139.7634 31.5988 139.4538 28.1496 139.4538 24.7447 c
139.4538 21.6935 139.4538 17.6695 142.5935 17.6695 c
f
*U
*u
0 D
173.3898 31.7756 m
167.6412 29.9184 164.6342 25.5406 163.6171 20.5438 c
165.4302 21.6493 166.5799 22.0472 168.1718 22.0472 c
172.5938 22.0472 175.7334 18.5539 175.7334 13.6897 c
175.7334 8.3833 171.9305 4.4035 166.8452 4.4035 c
161.185 4.4035 157.2937 8.737 157.2937 16.2102 c
157.2937 24.5236 163.2192 31.3776 172.3727 33.2349 C
173.3898 31.7756 l
f
1 D
166.9336 19.9689 m
165.607 19.9689 164.3689 19.3498 163.2634 18.5981 c
163.1307 17.2715 162.9538 15.5027 162.9538 13.955 c
162.9538 10.6385 163.4845 6.0396 166.7568 6.0396 c
169.7637 6.0396 170.0733 9.4888 170.0733 12.8937 c
170.0733 15.9449 170.0733 19.9689 166.9336 19.9689 c
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
